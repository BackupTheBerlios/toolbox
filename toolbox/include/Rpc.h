/* -*- Mode: C; tab-width: 2; indent-tabs-mode: t; c-basic-offset: 2 -*- */
//======================================================
// $Id: Rpc.h,v 1.1 2005/05/12 21:54:47 plg Exp $
//======================================================

// autogenerated/refactored on Wed Sep 22 14:13:45 2004 by Paul L. Gatille <Paul.Gatille@free.fr>

/*
 * Copyright (c) 2004, Paul Gatille
 * This file is part of Toolbox, an object-oriented utility library
 *
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the "Artistic License" which comes with this Kit.
 *
 * This software is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the Artistic License for more
 * details.
*/


// Class Rpc public methods

#ifndef __RPC_H
#define __RPC_H

#include "Toolbox.h"
#include "Composites.h"
#include "Toolbox.h"

typedef tb_Object_t           Rpc_t;


#define RPC_REQUEST            4321
#define RPC_REPLY              1234
#define RPC_MISMATCHING_TYPES  2
#define RPC_TRANSPORT_ERROR    3
#define RPC_REPLY_CORRUPTED    4
#define RPC_REPLY_ERROR        5
#define RPC_UNKNOWN_METHOD     6  
#define RPC_SUCCESS            7


extern int RPC_T;

// defined in Toolbox.h

// Class methods Identifiers

enum rpc_arg_mode {
	RPC_IN,
	RPC_OUT,
	RPC_INOUT,
};


struct Rpc_Args {
	int               type;
	enum rpc_arg_mode mode;
};


struct rpc_sig {
	void          * functor;
	int             methodId;
	int             nb_args;
	struct Rpc_Args Args[10];
};
typedef struct rpc_sig *rpc_sig_t;



// --[public methods goes here ]--

// constructors
Rpc_t Rpc();

// factories (produce new object(s))

/*...*/
// mutators (change self)


/*...*/
// inspectors (don't change self)


/*...*/
// others

int       Rpc_registerMethod    (Rpc_t Rpc, rpc_sig_t signature);
rpc_sig_t Rpc_getMethod         (Rpc_t Self, int methodId);
void      Rpc_receiveCall       (Socket_t So);
int       Rpc_sendCall          (Rpc_t Rpc, Socket_t So, int funcId, ...);


#if defined TB_MEM_DEBUG && (! defined NDEBUG) && (! defined __BUILD)

Rpc_t dbg_Rpc(char *func, char *file, int line);
#define Rpc(x...)      dbg_Rpc(__FUNCTION__,__FILE__,__LINE__,x)



#endif


#endif

